# Если не указывать по умолчанию будет 3 этапа: build, test, deploy.
stages:
  - build
  - test
  - review
  - release

# !!! Если нужно собирать docker images: runner д.б. запущен с опцией --privileged
# для этого необходимо в конфигурационный файл runner вписать что он работает в привилегированном режиме
# Файл находится по пути: nano /srv/gitlab-runner/config/config.toml на хосте где запущен docker контейнер с раннером
# ------
# [[runners]]
#   name = "my-runner"
#   url = "http://35.205.50.178/"
#   executor = "docker"
#   ...
#   [runners.docker]
#     ...
#     privileged = true
#     ...
# ------

# build название процесса, потом увидим его в интерфейсе
# В это шаге мы создаем докер образ приложения и помещаем его на DockerHub
build:
  stage: build
  # В этом контейнере будет выполняться задание build, сам контейнер будет запущен внутри контейнера alpine:latest
  # docker:git включает в себя установленный Docker и Git.
  image: docker:git
  # В секции service мы создаем дополнительный контейнер docker:dind который доступен контейнеру docker:git эти контейнеры имеют доступ друг к другу
  # во время выполнения job-а. Сервис docker:dind позволяет выполнять команды "docker" т.е. операции с Docker-образами и контейнерами
  services:
  - name: docker:20-dind
    alias: docker
    command: ["--tls=false"]
  # Скриптами задаем переменную для подключения к докер демону + Создаем образ приложения и пушим его в репозиторий DockerHub (см. функции в auto_devops)
  script:
    - build
  # overlay2 - это драйвер файловой системы, который позволяет объединять несколько файловых систем в одну, что позволяет создавать и использовать слои контейнеров более эффективно.
  # является рекомендуемым драйвером файловой системы для Docker.
  # Если не указываем эти переменные получаем ошибку Cannot connect to the Docker daemon at tcp://docker:2375. Is the docker daemon running?  
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  # Означает что задание будет выполнятся только при изменении кода в ветках проекта но не будет запускаться например при добавлении тега.  
  only:
    - branches

# Ничего не делает выходит с кодом 0
test:
  stage: test
  script:
    - exit 0
  only:
    - branches

# В это шаге мы меняем тег докер образа приложения и помещаем его на DockerHub. Только релизные версии для ветки main.
release:
  stage: release
  # Образ с интерфейсом командной строки (CLI) для Docker. Позволяет создавать, запускать, останавливать и удалять контейнеры, а также управлять Docker-образами
  image: docker
  services:
  - name: docker:20-dind
    command: ["--tls=false"]
    alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""  
  script:
    - release
  only:
    - main


review:
  stage: review
  script:
    - install_dependencies
    - ensure_namespace
    - install_tiller
    - deploy
  variables:
    KUBE_NAMESPACE: review
    host: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - main

# Блок начинающийся с точки (.) представляет собой способ ссылаться на группу элементов конфигурации и повторно использовать их в других местах.
# Чтобы повторно использовать этот блок мы должны его вызвать с помощью * перед именем "*docker_devops"
.auto_devops: &auto_devops |
  # Если переменная TRACE определена (т.е. ее значение не равно пустой строке) то set -x будет выполнена, и режим трассировки будет включен. 
  # Это означает, что перед выполнением каждой команды, команда и ее аргументы выводятся на экран для отслеживания выполнения скрипта.
  # Кроме того, set -x также включает расширенный режим сообщений об ошибках (errexit), который прерывает выполнение скрипта при обнаружении ошибок в командах. 
  [[ "$TRACE" ]] && set -x
  export CI_REGISTRY="docker.io"
  # $CI_PROJECT_PATH это предопределенная переменная окружения в формате ИмяГруппы/ИмяПроекта
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY/$CI_PROJECT_PATH
  # $CI_COMMIT_REF_SLUG это имя branch или tag в формате переделанном для URLs, host names and domain names
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export TILLER_NAMESPACE="kube-system"

  function deploy() {
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"

    if [[ "$track" != "stable" ]]; then
      name="$name-$track"
    fi

    echo "Clone deploy repository..."
    git clone http://gitlab-gitlab/$CI_PROJECT_NAMESPACE/reddit-deploy.git

    echo "Download helm dependencies..."
    helm dep update reddit-deploy/reddit

    echo "Deploy helm release $name to $KUBE_NAMESPACE"
    helm upgrade --install \
      --wait \
      --set ui.ingress.host="$host" \
      --set $CI_PROJECT_NAME.image.tag=$CI_APPLICATION_TAG \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      "$name" \
      reddit-deploy/reddit/
  }

  function install_dependencies() {

    # Ставим зависимости + glibc  
    apk add -U openssl curl tar gzip bash ca-certificates git
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.23-r3/glibc-2.23-r3.apk
    apk add glibc-2.23-r3.apk
    rm glibc-2.23-r3.apk

    # ставим gsutil чтобы управлять командами GCP 
    curl https://storage.googleapis.com/pub/gsutil.tar.gz | tar -xz -C $HOME
    export PATH=${PATH}:$HOME/gsutil
    
    # Ставим helm
    curl https://kubernetes-helm.storage.googleapis.com/helm-v2.9.1-linux-amd64.tar.gz | tar zx

    mv linux-amd64/helm /usr/bin/
    helm version --client

    # Эти команды загружают скрипт sync-repo.sh с репозитория GitHub, сохраняют его в /usr/bin/ и устанавливают права на выполнение для всех пользователей. 
    # Этот скрипт используется для синхронизации локального репозитория Helm с удаленным хранилищем чартов Helm
    curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
    chmod a+x /usr/bin/sync-repo.sh

    # Загружаем и устанавливаем утилиту kubectl - официальный клиент командной строки для управления кластером Kubernetes.
    curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    chmod +x /usr/bin/kubectl
    kubectl version --client
  }

  # Эта функция проверяет установлен ли докер. if ! docker info &>/dev/null (Если докер не установлен тогда)
  # Проверяем определены ли переменные $DOCKER_HOST и $KUBERNETES_PORT Если переменная $DOCKER_HOST не определена и $KUBERNETES_PORT определена, то функция устанавливает $DOCKER_HOST равным tcp://localhost:2375.
  # Что означает что подключение будет происходить к докер демону установленному на хосте
  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://docker:2375'
      fi
    fi
  }
  
  # Создаем пространство имен с именем $KUBE_NAMESPACE если оно не существует
  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  # Выпускаем релиз приложения, переименовываем тег на тег из файла VERSION и выкладываем на DockerHub
  function release() {

    echo "Updating docker images ..."
    
    # [[ -n ... ]] проверяется установлена ли переменная
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      echo ""
    fi

    docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    # Переименовываем тег в docker.io/ИмяГруппы/ИмяПроекта:ВерсияИзФайлаVERSION
    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    docker push "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    echo ""
  }

  function build() {

    # Создаем Docker Image Нашего приложения
    echo "Building Dockerfile-based application..."
    # Выводит только сокращенный хеш последнего коммита в текущей ветке репозитория Git
    echo `git show --format="%h" HEAD | head -1` > build_info.txt
    # Имя текущей ветки в Git
    echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    # $CI_APPLICATION_REPOSITORY - Это предустановленная переменная Gitlab которая содержит имя репозитория. По умолчанию, если переменная не задана, GitLab использует имя проекта(Project) как имя репозитория.
    # В нашем случае это docker.io/ИмяГруппы/ИмяПроекта (определена выше). $CI_APPLICATION_TAG это имя branch или tag
    docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    
    # [[ -n ... ]] проверяется установлена ли переменная
    # Подключаемся к DockerHub
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      echo ""
    fi

    # Засылаем образ на DockerHub
    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    echo ""
  }

  # устанавливает Tiller - серверную часть Helm
  function install_tiller() {
    echo "Checking Tiller..."
    helm init --upgrade
    kubectl rollout status -n "$TILLER_NAMESPACE" -w "deployment/tiller-deploy"
    if ! helm version --debug; then
      echo "Failed to init Tiller."
      return 1
    fi
    echo ""
  }

default:
  # interruptible если true то задание будет отменено когда запускается новый pipeline до завершения данного задания.
  interruptible: false
  # Образ по-умолчанию в котором все будет запускаться (Образ берется из DockerHub)
  image: alpine:latest
  # Блок команд который будет выполнен перед запуском любого задания (job)
  before_script:
    # Здесь (с помощью *) мы определяем что все команды блока .auto_devops: &auto_devops | будут включены в before_script
    - *auto_devops
