version: '3.3'
services:

  prometheus:
    image: ${USER_NAME}/prometheus
    # аналог команды -p 9090:9090
    ports:
      - '9090:9090'
    volumes:
      - prometheus_data:/prometheus
    # Передаем доп. параметры в командной строке эти команды аналог опций указываемых в команде docker run. 
    # Указываем конфигурвционный файл который мы создали заранее и скопировали в образ указава указав COPY в Dockerfile
    # Указываем путь к хранилищу данных
    # Задаем время хранения данных: один день  
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=1d'
    networks:
      front_net:
        aliases:
          - prometheus
      back_net:
        aliases:
          - prometheus
          
  node-exporter:
    image: prom/node-exporter:v0.15.2
    user: root
    # Монтируем локальную файловую систему в контейнер
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro  
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    networks:
      front_net:
        aliases:
          - node-exporter
      back_net:
        aliases:
          - node-exporter

  mongodb-exporter:
    user: root
    image: bitnami/mongodb-exporter:latest
    # Use the environment variables to configure the MongoDB connection
    command:
      # Опция нужна чтобы собирать все метрики mongo_db а не только mongodb_up 
      - '--collect-all'
      - '--mongodb.uri=mongodb://post_db:27017'
      # Можно собирать только часть метрик:
      # - '--collect.database'
      # - '--collect.collection'
      # - '--collect.indexusage'
      # - '--collect.topmetrics'
    # environment:
    #   - MONGODB_URI=mongodb://post_db:27017
    networks:
      back_net:
        aliases:
          - mongodb-exporter

  blackbox-exporter:
    image: ${USER_NAME}/blackbox-exporter:${BLACKBOX_EXPORTER_VERSION}
    ports:
      - '9115:9115'
    networks:
      back_net:
        aliases:
          - blackbox-exporter
      front_net:
        aliases:
          - blackbox-exporter
  cadvisor:
    image: google/cadvisor:v0.29.0
    volumes:
      - '/:/rootfs:ro'
      - '/var/run:/var/run:rw'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
    ports:
      - '8080:8080'
    networks:
      back_net:
        aliases:
          - cadvisor      
  
  grafana:
    image: grafana/grafana:5.0.0
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=secret
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    networks:
      back_net:
        aliases:
          - grafana

  alertmanager:
    image: ${USER_NAME}/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
    ports:
      - 9093:9093
    networks:
      front_net:
        aliases:
          - alertmanager

  telegraf:
    image: ${USER_NAME}/telegraf
    ports:
      - 9273:9273
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      back_net:
        aliases:
          - telegraf
      front_net:
        aliases:
          - telegraf

volumes:
  prometheus_data:
  grafana_data:

networks:
  back_net:
    # Use bridge driver for back_net network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.2.0/24
  front_net:
    # Use bridge driver for front_net network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.1.0/24
