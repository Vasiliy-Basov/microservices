<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

# фильтр сообщений от сервиса post
<filter service.post>
  @type parser
  key_name log # в этом случае мы парсим поле log  и все что находится внутри этого поля теперь тоже доступно для фильтрации 
  # (появятся новые значения представленные внутри этого поля разбитые по парам ключ значение)
  <parse>
    @type json
  </parse>
</filter>

# <filter service.ui>
#   @type parser
#   format /\[(?<time>[^\]]*)\]  (?<level>\S+) (?<user>\S+)[\W]*service=(?<service>\S+)[\W]*event=(?<event>\S+)[\W]*(?:path=(?<path>\S+)[\W]*)?request_id=(?<request_id>\S+)[\W]*(?:remote_addr=(?<remote_addr>\S+)[\W]*)?(?:method= (?<method>\S+)[\W]*)?(?:response_status=(?<response_status>\S+)[\W]*)?(?:message='(?<message>[^\']*)[\W]*)?/
#   key_name log
# </filter>

<filter service.ui>
  @type parser
  key_name log
  <parse>
    @type grok
    grok_pattern %{RUBY_LOGGER}
  </parse>  
</filter>

<filter service.ui>
  @type parser
  key_name message
  reserve_data true
  <parse>
    @type grok
    grok_pattern service=%{WORD:service} \| event=%{WORD:event} \| request_id=%{GREEDYDATA:request_id} \| message='%{GREEDYDATA:message}'
  </parse>  
</filter>

<filter service.ui>
  @type parser
  key_name message
  reserve_data true
  <parse>
    @type grok
    grok_pattern service=%{WORD:service} \| event=%{WORD:event} \| path=%{URIPATH:path} \| request_id=%{GREEDYDATA:request_id} \| remote_addr=%{IP:remote_addr} \| method= %{WORD:method} \| response_status=%{NUMBER:response_status}
  </parse>    
</filter>

<match *.**>
  @type copy

  <store>
    @type elasticsearch
    host elasticsearch
    port 9200
    logstash_format true
    logstash_prefix fluentd
    logstash_dateformat %Y%m%d
    include_tag_key true
    type_name access_log
    tag_key @log_name
    flush_interval 1s
  </store>

  <store>
    @type stdout
  </store>
</match>
