# Подключение файла 'app' из той же директории, где находится файл теста. 
# Этот файл содержит код приложения, которое мы тестируем.
require_relative './app'
# Подключение стандартной библиотеки Ruby для написания тестов, 
# которая предоставляет набор проверок и запускаторов тестов.
require 'test/unit'
# Подключение библиотеки, которая позволяет тесту взаимодействовать с приложением, 
# основанным на Rack, таким как Sinatra, с помощью имитации HTTP-запросов и ответов.

# Rack это интерфейс между веб-сервером и веб-приложением на Ruby. 
# Он определяет набор методов, которые должны быть предоставлены веб-приложением и набор методов, 
# которые должен предоставлять веб-сервер, чтобы обработать запросы.

# Rack предоставляет стандартный интерфейс для взаимодействия с веб-приложением, 
# который может быть использован любым веб-сервером, поддерживающим Rack. 
# Это позволяет разработчикам использовать любой веб-сервер, поддерживающий Rack, 
# для запуска своего веб-приложения, не зависимо от того, на каком фреймворке оно написано.

# Rack популярен в сообществе Ruby, и многие фреймворки, такие как Sinatra и Rails, 
# используют Rack в качестве основы для своих веб-приложений. 
# Это дает разработчикам возможность использовать эти фреймворки и все их возможности, 
# но в то же время иметь гибкость в выборе веб-сервера и других компонентов инфраструктуры.
require 'rack/test'

# Устанавливает переменную окружения для приложения Sinatra в "test", 
# что может использоваться для настройки приложения по-другому при запуске тестов.
set :environment, :test

# определяет новый класс тестов "MyAppTest", который наследуется от "Test::Unit::TestCase". 
# Это базовый класс для тестов в библиотеке "test/unit".
class MyAppTest < Test::Unit::TestCase
    #включает модуль, который предоставляет методы для взаимодействия с приложением через Rack, такие как "get" и "post".
    include Rack::Test::Methods
    
  # Метод "def app" определяет Rack-приложение, с которым будут взаимодействовать тесты. 
  # В данном случае это "Sinatra::Application", который является основным классом для Sinatra-приложения.
  def app
    Sinatra::Application
  end
  # Метод "def test_get_request" определяет тестовый случай для отправки GET-запроса к приложению.
  # Строка "get '/'" отправляет GET-запрос на корневой путь приложения.
  # Строка "assert last_response.ok?" использует проверку, чтобы убедиться, что последний ответ от приложения имеет статус "200 OK".

  # В целом, этот тест проверяет, что приложение Sinatra может обрабатывать 
  # GET-запросы и возвращать корректный HTTP-статус "200 OK" для корневого пути "/".
  def test_get_request
    get '/'
    assert last_response.ok?
  end
end
